[{"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\index.js":"1","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\App.js":"2","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-input\\TaskInput.js":"3","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-list\\TaskList.js":"4","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-list\\useTask.js":"5","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\reusables\\buttons\\Button.js":"6","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-header\\TaskHeader.js":"7","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\reusables\\utilities.js":"8"},{"size":198,"mtime":1609258702561,"results":"9","hashOfConfig":"10"},{"size":4484,"mtime":1614426813272,"results":"11","hashOfConfig":"10"},{"size":327,"mtime":1614346189877,"results":"12","hashOfConfig":"10"},{"size":1361,"mtime":1614426848574,"results":"13","hashOfConfig":"10"},{"size":3599,"mtime":1611344674880,"results":"14","hashOfConfig":"10"},{"size":163,"mtime":1611347843264,"results":"15","hashOfConfig":"10"},{"size":940,"mtime":1614427744938,"results":"16","hashOfConfig":"10"},{"size":197,"mtime":1614427320250,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1hqcznr",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\index.js",[],["37","38"],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\App.js",[],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-input\\TaskInput.js",[],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-list\\TaskList.js",[],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-list\\useTask.js",["39"],"import { useState, useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction useTask() {\r\n  const tasks = localStorage.getItem(\"taskApp\")\r\n    ? JSON.parse(localStorage.getItem(\"taskApp\"))\r\n    : [];\r\n  const [taskList, setTasklist] = useState(tasks);\r\n  const [completedTask, setCompletedTask] = useState(0);\r\n\r\n  //SYNC WITH LOCALSTORAGE & LOCAL STATE\r\n  let sync = (_taskList) => {\r\n    setTasklist(_taskList);\r\n    localStorage.setItem(\"taskApp\", JSON.stringify(_taskList));\r\n    getTotalCompletedTask();\r\n  };\r\n\r\n  //ADD TO TASK LIST FROM TASK INPUT\r\n  const addToTaskList = (e) => {\r\n    let inputValue = e.target.value;\r\n    if (inputValue && e.key === \"Enter\") {\r\n      let _taskList = [\r\n        ...taskList,\r\n        {\r\n          id: uuidv4(),\r\n          title: inputValue,\r\n          completed: false,\r\n          inprogress: false,\r\n          openTaskModal: false,\r\n        },\r\n      ];\r\n      // clear the input  field\r\n      e.target.value = \"\";\r\n      //sync with local state and local storage\r\n      sync(_taskList);\r\n    }\r\n  };\r\n\r\n  //TOGGLE A TASK MODAL\r\n  const toggleRowModal = (id) => {\r\n    const modifiedTaskList = taskList.map((task) => {\r\n      if (task.id === id) {\r\n        task.openTaskModal = true;\r\n        return task;\r\n        // Here we modify each property of the array element passed to the map function and then return it.\r\n      } else {\r\n        task.openTaskModal = false;\r\n        return task;\r\n      }\r\n    });\r\n    //sync with local state and local storage\r\n    sync(modifiedTaskList);\r\n  };\r\n\r\n  //DELETE A TASK ITEM\r\n  const deleteATaskItem = (id) => {\r\n    //This will filter out the task that was clicked from the task list and the sync the resulting tasklist\r\n    const filteredItem = taskList.filter((el) => {\r\n      return el.id !== id;\r\n    });\r\n    //sync with local state and local storage\r\n    sync(filteredItem);\r\n  };\r\n\r\n  //MOVE CLICK TASK TO TO\r\n  const moveClickedTaskToTop = (task, index) => {\r\n    //make copy of the taskList using map\r\n    const taskListCopy = taskList.map((el) => el);\r\n    taskListCopy.splice(index, 1);\r\n    taskListCopy.unshift(task);\r\n    //sync with local state and local storage\r\n    sync(taskListCopy);\r\n  };\r\n\r\n  //TURN THE INPROGRESS PROPERTY OF THE CLICKED TASK TO TRUE\r\n  const handleInprogress = (id) => {\r\n    const taskListCopy = taskList.map((task) => {\r\n      if (task.id === id) {\r\n        task.inprogress = true;\r\n        return task;\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n    //sync with local state and local storage\r\n    sync(taskListCopy);\r\n  };\r\n\r\n  //TURN THE COMPLETED PROPERTY OF THE CLICKED TASK TO TRUE\r\n  const handleCompleted = (id) => {\r\n    const taskListCopy = taskList.map((task) => {\r\n      if (task.id === id) {\r\n        task.completed = true;\r\n        return task;\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n    sync(taskListCopy);\r\n  };\r\n  // TOTAL COMPLETED TASKS\r\n  const getTotalCompletedTask = () => {\r\n    let totalCompletedTasks = taskList.filter(\r\n      (task) => task.completed === true\r\n    );\r\n    setCompletedTask(totalCompletedTasks.length);\r\n  };\r\n\r\n  // CLOSE MENU MODAL\r\n  const closeTaskMenu = () => {\r\n    const taskListCopy = taskList.map((task) => {\r\n      task.openTaskModal = false;\r\n      return task;\r\n    });\r\n    sync(taskListCopy);\r\n  };\r\n  return {\r\n    taskList,\r\n    completedTask,\r\n    addToTaskList,\r\n    toggleRowModal,\r\n    deleteATaskItem,\r\n    moveClickedTaskToTop,\r\n    handleInprogress,\r\n    handleCompleted,\r\n    getTotalCompletedTask,\r\n    closeTaskMenu,\r\n  };\r\n}\r\n\r\nexport default useTask;\r\n",["40","41"],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\reusables\\buttons\\Button.js",[],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-header\\TaskHeader.js",[],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\reusables\\utilities.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":20,"nodeType":"48","messageId":"49","endLine":1,"endColumn":29},{"ruleId":"42","replacedBy":"50"},{"ruleId":"44","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["52"],["53"],"no-global-assign","no-unsafe-negation"]