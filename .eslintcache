[{"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\index.js":"1","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\App.js":"2","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-input\\TaskInput.js":"3","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-list\\TaskList.js":"4","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-list\\useTask.js":"5","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\reusables\\buttons\\Button.js":"6"},{"size":198,"mtime":1609258702561,"results":"7","hashOfConfig":"8"},{"size":4862,"mtime":1611611136448,"results":"9","hashOfConfig":"8"},{"size":326,"mtime":1609424726303,"results":"10","hashOfConfig":"8"},{"size":2092,"mtime":1611345688356,"results":"11","hashOfConfig":"8"},{"size":3599,"mtime":1611344674880,"results":"12","hashOfConfig":"8"},{"size":163,"mtime":1611347843264,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1hqcznr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\index.js",[],["29","30"],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\App.js",["31"],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-input\\TaskInput.js",[],"C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-list\\TaskList.js",["32"],"import React from \"react\";\r\nimport \"./task-list.scss\";\r\nimport useTask from \"./useTask\";\r\n\r\nfunction TaskList(props) {\r\n  const {\r\n    taskList,\r\n    onToggleRowModal,\r\n    onDeleteATaskItem,\r\n    onMoveClickedTaskToTop,\r\n    onHandleInprogress,\r\n    onHandleCompleted,\r\n    onCloseTaskMenu,\r\n  } = props;\r\n\r\n  return (\r\n    <div className=\"row-list\">\r\n      {taskList.map((task, index) => (\r\n        <div\r\n          className={`row ${task.inprogress && \"inprogress\"} \r\n          ${task.completed && \"completed\"}`}\r\n          key={task.id}\r\n        >\r\n          <div className={`row_title ${task.completed && \"line-Through\"}`}>\r\n            {task.title}\r\n          </div>\r\n\r\n          <div className=\"row_menu-wrapper\">\r\n            <div\r\n              className=\"menu-btn\"\r\n              onClick={() => {\r\n                onToggleRowModal(task.id);\r\n              }}\r\n            >\r\n              <span>&#x22EE;</span>\r\n            </div>\r\n\r\n            <ul className={`menu ${task.openTaskModal && \"showMenu\"}`}>\r\n              <span\r\n                className=\"menu-close-btn\"\r\n                onClick={() => {\r\n                  onCloseTaskMenu();\r\n                }}\r\n              >\r\n                X\r\n              </span>\r\n              <li\r\n                onClick={() => {\r\n                  onHandleCompleted(task.id);\r\n                }}\r\n              >\r\n                Completed\r\n              </li>\r\n              <li\r\n                onClick={() => {\r\n                  onHandleInprogress(task.id);\r\n                }}\r\n              >\r\n                Inprogress\r\n              </li>\r\n              <li\r\n                onClick={() => {\r\n                  onDeleteATaskItem(task.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </li>\r\n              <li\r\n                onClick={() => {\r\n                  onMoveClickedTaskToTop(task, index);\r\n                }}\r\n              >\r\n                &#x2191;\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\task-list\\useTask.js",["33"],"import { useState, useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction useTask() {\r\n  const tasks = localStorage.getItem(\"taskApp\")\r\n    ? JSON.parse(localStorage.getItem(\"taskApp\"))\r\n    : [];\r\n  const [taskList, setTasklist] = useState(tasks);\r\n  const [completedTask, setCompletedTask] = useState(0);\r\n\r\n  //SYNC WITH LOCALSTORAGE & LOCAL STATE\r\n  let sync = (_taskList) => {\r\n    setTasklist(_taskList);\r\n    localStorage.setItem(\"taskApp\", JSON.stringify(_taskList));\r\n    getTotalCompletedTask();\r\n  };\r\n\r\n  //ADD TO TASK LIST FROM TASK INPUT\r\n  const addToTaskList = (e) => {\r\n    let inputValue = e.target.value;\r\n    if (inputValue && e.key === \"Enter\") {\r\n      let _taskList = [\r\n        ...taskList,\r\n        {\r\n          id: uuidv4(),\r\n          title: inputValue,\r\n          completed: false,\r\n          inprogress: false,\r\n          openTaskModal: false,\r\n        },\r\n      ];\r\n      // clear the input  field\r\n      e.target.value = \"\";\r\n      //sync with local state and local storage\r\n      sync(_taskList);\r\n    }\r\n  };\r\n\r\n  //TOGGLE A TASK MODAL\r\n  const toggleRowModal = (id) => {\r\n    const modifiedTaskList = taskList.map((task) => {\r\n      if (task.id === id) {\r\n        task.openTaskModal = true;\r\n        return task;\r\n        // Here we modify each property of the array element passed to the map function and then return it.\r\n      } else {\r\n        task.openTaskModal = false;\r\n        return task;\r\n      }\r\n    });\r\n    //sync with local state and local storage\r\n    sync(modifiedTaskList);\r\n  };\r\n\r\n  //DELETE A TASK ITEM\r\n  const deleteATaskItem = (id) => {\r\n    //This will filter out the task that was clicked from the task list and the sync the resulting tasklist\r\n    const filteredItem = taskList.filter((el) => {\r\n      return el.id !== id;\r\n    });\r\n    //sync with local state and local storage\r\n    sync(filteredItem);\r\n  };\r\n\r\n  //MOVE CLICK TASK TO TO\r\n  const moveClickedTaskToTop = (task, index) => {\r\n    //make copy of the taskList using map\r\n    const taskListCopy = taskList.map((el) => el);\r\n    taskListCopy.splice(index, 1);\r\n    taskListCopy.unshift(task);\r\n    //sync with local state and local storage\r\n    sync(taskListCopy);\r\n  };\r\n\r\n  //TURN THE INPROGRESS PROPERTY OF THE CLICKED TASK TO TRUE\r\n  const handleInprogress = (id) => {\r\n    const taskListCopy = taskList.map((task) => {\r\n      if (task.id === id) {\r\n        task.inprogress = true;\r\n        return task;\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n    //sync with local state and local storage\r\n    sync(taskListCopy);\r\n  };\r\n\r\n  //TURN THE COMPLETED PROPERTY OF THE CLICKED TASK TO TRUE\r\n  const handleCompleted = (id) => {\r\n    const taskListCopy = taskList.map((task) => {\r\n      if (task.id === id) {\r\n        task.completed = true;\r\n        return task;\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n    sync(taskListCopy);\r\n  };\r\n  // TOTAL COMPLETED TASKS\r\n  const getTotalCompletedTask = () => {\r\n    let totalCompletedTasks = taskList.filter(\r\n      (task) => task.completed === true\r\n    );\r\n    setCompletedTask(totalCompletedTasks.length);\r\n  };\r\n\r\n  // CLOSE MENU MODAL\r\n  const closeTaskMenu = () => {\r\n    const taskListCopy = taskList.map((task) => {\r\n      task.openTaskModal = false;\r\n      return task;\r\n    });\r\n    sync(taskListCopy);\r\n  };\r\n  return {\r\n    taskList,\r\n    completedTask,\r\n    addToTaskList,\r\n    toggleRowModal,\r\n    deleteATaskItem,\r\n    moveClickedTaskToTop,\r\n    handleInprogress,\r\n    handleCompleted,\r\n    getTotalCompletedTask,\r\n    closeTaskMenu,\r\n  };\r\n}\r\n\r\nexport default useTask;\r\n","C:\\Users\\Nwobodo george\\Desktop\\new-projects\\task-app\\src\\components\\reusables\\buttons\\Button.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":4,"column":8,"nodeType":"40","messageId":"41","endLine":4,"endColumn":14},{"ruleId":"38","severity":1,"message":"42","line":3,"column":8,"nodeType":"40","messageId":"41","endLine":3,"endColumn":15},{"ruleId":"38","severity":1,"message":"43","line":1,"column":20,"nodeType":"40","messageId":"41","endLine":1,"endColumn":29},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'useTask' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]